Metadata-Version: 2.4
Name: covalence-sdk
Version: 0.1.0
Summary: Secure, high-performance Python SDK for Covalence
Home-page: https://github.com/covalence/sdk
Author: Covalence
Author-email: ali@covalence.run
License: MIT
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.25.1
Requires-Dist: PyJWT>=2.0.0
Requires-Dist: pydantic>=1.10.2
Requires-Dist: pydantic[email]
Requires-Dist: urllib3>=1.26.0
Requires-Dist: click>=8.0.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

```markdown
# Covalence SDK

A secure, high‑performance Python client for Covalence.

## Features

- One‑time key swap + JWT tokens  
- Automatic token refresh (thread‑safe, proactive)  
- Connection pooling & retries  
- Provider→URL map (just `provider="openai"`)  
- Pluggable logging  

## Installation

```bash
pip install covalence-sdk
```

## Quickstart

```python
from covalence import Client

client = Client(
  email="alice@acme.com",
  password="hunter2",
  openai_api_key="sk-REALLY_SECRET",   # optional: can read from OPENAI_API_KEY
  provider="openai"                    # auto‑fills https://api.openai.com/v1
)

# Register a model
client.register_model(name="my-gpt4", model="gpt-4o")

# Chat
reply = client.chat(
  model="my-gpt4",
  messages=[{"role":"user","content":"Hello!"}]
)
print("LLM → ", reply)

# Logout
client.logout()
```

## License

MIT
